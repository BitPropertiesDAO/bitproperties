/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DAORouterInterface extends ethers.utils.Interface {
  functions: {
    "Properties(uint256)": FunctionFragment;
    "daoName()": FunctionFragment;
    "daoProperties(address)": FunctionFragment;
    "governanceTokenAddress()": FunctionFragment;
    "governorAddress()": FunctionFragment;
    "launchNewProperty(string,uint256,uint256)": FunctionFragment;
    "propertyCounter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Properties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "daoName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoProperties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "launchNewProperty",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propertyCounter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Properties", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchNewProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "propertyCounter",
    data: BytesLike
  ): Result;

  events: {
    "NewProperty(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewProperty"): EventFragment;
}

export type NewPropertyEvent = TypedEvent<
  [string] & { propertyAddress: string }
>;

export class DAORouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DAORouterInterface;

  functions: {
    Properties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    daoName(overrides?: CallOverrides): Promise<[string]>;

    daoProperties(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    governorAddress(overrides?: CallOverrides): Promise<[string]>;

    launchNewProperty(
      _propertyName: string,
      _numShares: BigNumberish,
      _pricePerShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    propertyCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;
  };

  Properties(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  daoName(overrides?: CallOverrides): Promise<string>;

  daoProperties(arg0: string, overrides?: CallOverrides): Promise<string>;

  governanceTokenAddress(overrides?: CallOverrides): Promise<string>;

  governorAddress(overrides?: CallOverrides): Promise<string>;

  launchNewProperty(
    _propertyName: string,
    _numShares: BigNumberish,
    _pricePerShare: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  propertyCounter(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Properties(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    daoName(overrides?: CallOverrides): Promise<string>;

    daoProperties(arg0: string, overrides?: CallOverrides): Promise<string>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<string>;

    governorAddress(overrides?: CallOverrides): Promise<string>;

    launchNewProperty(
      _propertyName: string,
      _numShares: BigNumberish,
      _pricePerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    propertyCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewProperty(address)"(
      propertyAddress?: null
    ): TypedEventFilter<[string], { propertyAddress: string }>;

    NewProperty(
      propertyAddress?: null
    ): TypedEventFilter<[string], { propertyAddress: string }>;
  };

  estimateGas: {
    Properties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoName(overrides?: CallOverrides): Promise<BigNumber>;

    daoProperties(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    governanceTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    governorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    launchNewProperty(
      _propertyName: string,
      _numShares: BigNumberish,
      _pricePerShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    propertyCounter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Properties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daoName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoProperties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launchNewProperty(
      _propertyName: string,
      _numShares: BigNumberish,
      _pricePerShare: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    propertyCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
